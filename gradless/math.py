# AUTOGENERATED! DO NOT EDIT! File to edit: 06_math.ipynb (unless otherwise specified).

__all__ = ['log1mexp', 'logexpit', 'arcsinh_transform', 'log_transform']

# Cell
import numpy
import scipy
import scipy.stats
import jax.numpy as jnp
import jax.scipy as jsc

# Cell
def log1mexp(x, threshold=numpy.log(.5)):
    """Computes log(1 - exp(x))
    Note to self: Add citation"""
    #Some type handling
    if type(x) is not numpy.array:
        x=numpy.array(x)
    if hasattr(x, 'shape'):
        filter_val=x<threshold
        val=numpy.zeros(x.shape)
        #x<threshold
        val[filter_val]=numpy.log1p(-numpy.exp(x[filter_val]))
        #x>=threshold
        val[~filter_val]=numpy.log(- numpy.expm1(x[~filter_val]))
    else:
        if x<threshold:
            val=numpy.log1p(-numpy.exp(x))
        else:
            val=numpy.log( -numpy.expm1(x))


    return val


# Cell
def logexpit(x):
    """Computes the log of the inverse logit function"""
    return -jnp.logaddexp(0, -x)

# Cell
def arcsinh_transform(func):
    """A wrapper function that creates a new function with applies the signed pseudolog transfrom"""
    def call_func(*args, **kwargs):
        return numpy.arcsinh( func(*args,**kwargs)/2)
    return call_func

# Cell
def log_transform(func):
    """A wrapper function that creates a new function that applies the log transform"""
    def call_func(*args, **kwargs):
        return numpy.log( func(*args,**kwargs))
    return call_func