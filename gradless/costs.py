# AUTOGENERATED! DO NOT EDIT! File to edit: 03_models.ipynb (unless otherwise specified).

__all__ = ['ModelBase', 'Model']

# Cell
import numpy
import scipy
import scipy.stats

from abc import ABC, abstractmethod

# Cell
class ModelBase(ABC):
    """A helper class that provides a standard means to create
    classes to store models used by GradientDescent."""


    RV=None
    update_rvs=True
    @abstractmethod     #Require that all cost functions have the .evaluate method

    def evaluate(self): pass

    def sample_rvs(self):
        """This can be used to regenerate a random variable used by the cost function.
        It may be desirable hold some random variables constant during gradient evaluations, for example"""
        if self.RV is not None:
            self.z=self.RV.rvs()

#         raise NotImplementedError("Cost functions must included a boolean attribute 'update_rvs'")



# Cell
class Model(ModelBase):
    """A class for passing objective functions and data to the GradientDescent
    optimizer

    Inputs:

    cost - the objective function to be minimized
    data - the data to which the model will be fit (optional)
    RV - An object with a .rvs() method to generate random variables
        for the cost function
    update_rvs: True/False call RV.rvs() before each gradient evaluation
    """
    def __init__(self, cost, data=None, RV=None, update_rvs=False):

        self.cost=cost
        self.data=data
        self.RV=RV
        if self.RV is not None:
            self.z=self.sample_rvs()
        else: self.z=None

        if RV is None:
            self.update_rvs=False
        else:
            assert type(update_rvs) is bool
            self.update_rvs=update_rvs
    def evaluate(self, theta):
        if self.data is None and self.RV is None:
            return self.cost(theta)
        if self.data is None and self.RV is not None:
            return self.cost(theta, self.z)
        if self.RV is None:
            return self.cost(theta, self.data)
        else:
            return self.cost(theta, self.data, self.z)